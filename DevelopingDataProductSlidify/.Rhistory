install.packages("slidify")
install.packages("slidify")
quit
quit()
demo()
glm()
formula <- 2x+1
formula
formula = 2x+1
formula
glm.vr
library(stats)
glm.vr
glm()
formula
function(formula)
2x+1
function(formula)
function(formula)
glm()
hcl()
hclcolors
q()
install.packages("boot")
install.packages("class")
install.packages("cluster")
install.packages("codetools")
install.packages("foreign")
install.packages("lattice")
install.packages("mgcv")
install.packages("nlme")
install.packages("rpart")
install.packages("survival")
install.packages("MASS")
install.packages("spatial")
install.packages("nnet")
install.packages("Matrix")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='y2charlie', token='36261276537A799B55648BCB8710F325', secret='ZUzrvaFMfzvVPsYA/rq1oPi8YkHD6cRBdKTgmuvL')
install.packages(c('ggplot2', 'shiny'))
library(xlsx)
?fread
??fread
dt <- fread("quiz1q5.csv")
?read.xlsx
dt <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx")
dt <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1)
head(dt)
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(fileUrl,destfile="cameras.xlsx")
?download.file
download.file(fileUrl,destfile="cameras.xlsx" mode="wb")
download.file(fileUrl,destfile="cameras.xlsx",mode="wb")
download.file(fileUrl,destfile="cameras.xlsx")
download.file(fileUrl,destfile="cameras2.xlsx", mode="wb")
download.file(fileUrl,destfile="cameras3.xlsx", mode="ab")
download.file(fileUrl,destfile="cameras4.xlsx", mode="a")
download.file(fileUrl,destfile="cameras5.xlsx", mode="w")
dat <- read.xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", 1)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quest3.xlsx", mode="wb")
dat <- read.xlsx("quest3.xlsx", 1)
sum(dat$Zip*dat$Ext,na.rm=T)
dat
write.csv(dat, "output.csv")
?read.xlsx
dat <- read.xlsx("quest3.xlsx", 1)
dat2 <- dat[c(18:23),c(7:15)]
dat2
sum(dat2$Zip*dat2$Ext,na.rm=T)
dat2$Zip
dat2$Ext
dat <- read.xlsx("quest3.xlsx", 1, rowIndex=18:23, colIndex=7:15)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
install.packages("data.table")
library(data.table)
?fread
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(DT[,mean(pwgtp15),by=SEX])
DT[,mean(pwgtp15),by=SEX]
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf, 3)
head(mydf)
library(dplyr)
packageversion("dpylr")
packageVersion("dpylr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
bye()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="quest3.xlsx", mode="wb")
xlsdat <- read.xlsx("quest3.xlsx", 1, colIndex=14:21, rowIndex=74:79)
sum(xlsdat$Supp_vol*Supp_Org_Cost, na.rm=T)
names(xlsdat)
sum(xlsdat$Supp_vol*xlsdat$Supp_Org_Cost, na.rm=T)
xlsdat
sum(xlsdat$Supp_vol*xlsdat$Supp_Org_Cost)
xlsdat$Supp_vol*xlsdat$Supp_Org_Cost
class(xlsdat$Supp_Vol)
xlsdat$Supp_Vol*xlsdat$Supp_Org_Cost
sum(xlsdat$Supp_Vol*xlsdat$Supp_Org_Cost)
swirl()
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select()
cran
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500" | r_os == "linux-gnu")
filter(cran, size > 100500", r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
crn3
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
play()
gather(student, a, b, -grade)
gather(students, a, b, -grade)
next()
nxt()
students2
res <- gather(students2, sex_class, value)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
bye()
quit()
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "52cdae62baafc989547f",
secret = "36c82c5afa8b845de66105054fb9d7e1781d42fb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "52cdae62baafc989547f",
secret = "36c82c5afa8b845de66105054fb9d7e1781d42fb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "52cdae62baafc989547f",
secret = "36c82c5afa8b845de66105054fb9d7e1781d42fb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "52cdae62baafc989547f",
secret = "36c82c5afa8b845de66105054fb9d7e1781d42fb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "52cdae62baafc989547f",
secret = "36c82c5afa8b845de66105054fb9d7e1781d42fb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
view(content(req))
View(content(req))
req
content(req)
answer <- content(req)
class(answer)
dim(answer)
length(answer)
answer[1]
dput(req, file = "l_str.csv")
getwd()
answer[2]
answer[1]$created_at
answer[2]$created_at
answer[[1]]$created_at
install.packages("rmysql")
install.packages("RMySQL")
?nchar
library(XML)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url, useInternalNodes=T)
dim(html)
class(html)
library(httr)
GET(url)
html2 = GET(url)
content2 = contect(html2, as="Text")
content2 = content(html2, as="Text")
content2 = content(html2, as="text")
dim(content2)
class(content2)
content2
content2[1]
content2[2]
nchar(content2)
class(html2)
temp <- htmlTreeParse(url, useInternalNodes=T)
temp[1]
url
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
nchar(html[c(10,20,30,100)])
nchar(html[10])
class(htmlCode)
htmlCode[10]
nchar(htmlCode[c(10,20,30,100)])
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
is.na(x$V4)
sum(is.na(x$V4))
sum(x$V4)
dim(x)
?sapply
taply
?tapply
tapply(x, 2, sum)
tapply(x, 1, sum)
?apply
apply(x, c(,4),sum)
apply(x, c(1:1332,4),sum)
x$V4
sum(x$V4)
df <- read.csv("getdata-data-ss06pid.csv")
dim(df)
sqldf("select count(*) from df")
options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R") # as per FAQ #5 use R code rather than tcltk
sqldf("select count(*) from df")
library(options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R") # as per FAQ #5 use R code rather than tcltk
)
library(SQLite)
install.packages("sqliter")
options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R") # as per FAQ #5 use R code rather than tcltk
sqldf("select count(*) from df")
?sqldf
??sqldf
options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R") # as per FAQ #5 use R code rather than tcltk
library(RMySQL)
library(sqldf)
work.class_scores <- BOD # BOD is built in
sqldf("select count(*) from 'work.class_scores'")
library(sqldf)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "52cdae62baafc989547f",
secret = "36c82c5afa8b845de66105054fb9d7e1781d42fb")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
reply <- content(req)
class(reply)
list[[1:30]]$url
list[[1]]$url
reply[[1:30]]$url
reply[[1]]$url
reply[[2]]$url
reply[[3]]$url
reply[[4]]$url
reply[[5]]$url
reply[[6]]$url
reply[[6]]
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
nchar(htmlCode[c(10,20,30,100)])
df <- read.fwf("getdata-wksst8110.for")
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
sum(x$V4)
length(x$V4)
x$V4
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("C:\Users\yangyaw\Documents\R\win-library\3.2\caret_6.0-62.zip")
install.packages("~/R/win-library/3.2/caret_6.0-62.zip", repos = NULL)
install.packages("~/R/win-library/3.2/caret_6.0-62.zip", repos = NULL)
setwd("D:/Coursera/R_WorkingDir")
getwd()
install.packages("shiny")
install.packages("manipulate")
setwd("D:/Coursera/R_WorkingDir/ShinyProject")
getwd()
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages("digest")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='y2charlie', token='36261276537A799B55648BCB8710F325', secret='ZUzrvaFMfzvVPsYA/rq1oPi8YkHD6cRBdKTgmuvL')
setwd("D:/Coursera/R_WorkingDir/ShinyProject")
getwd()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data(mtcars)
colnames(mtcars)
str(mtcars)
runApp()
?radiobuttoninput
??radiobuttoninput
setwd("D:/Coursera/R_WorkingDir/DevelopingDataProductShiny")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dataset)
library(data)
?dataset
??dataset
mtcars
dataset(mtcars)
dataSet(mtcars)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
m <- lm(mpg ~ cyl + hp + wt + am, data=mtcars)
summary(m)
m$adj.r.squared
m$adj.r.square
m$adj.r.squared
m$adj.r.squared
summary(m)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(slidify)
author("Yang Yaw")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
devtools::install_github('muschellij2/slidify')
slidify('index.Rmd')
slidify('index.Rmd')
